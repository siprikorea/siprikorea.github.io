{"version":3,"sources":["view/view_date.jsx","controller/control_chant.js","view/view_chant.jsx","App.js","serviceWorker.js","index.js"],"names":["ViewDate","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleDateChange","bind","assertThisInitialized","handlePrevClick","handleTodayClick","handleNextClick","state","date","Date","setState","onChange","DateFnsUtils","addDays","react_default","a","createElement","material_ui_pickers_esm","utils","onClick","format","margin","label","value","Component","audio","Audio","ControlChant","URL_SHEET","URL_MP3","number","padStart","url","src","play","ViewChant","controlChant","handleShow","handleChange","handlePlay","handleStop","show","$","css","window","height","e","target","stop","name","type","id","sheet","style","border","width","App","localStorage","MISSA_DATE","toString","view_date","view_chant","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.09044a10.chunk.js","sourcesContent":["import 'date-fns';\n//import koLocale from 'date-fns/locale/ko';\nimport React, { Component } from 'react';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { MuiPickersUtilsProvider, DatePicker } from 'material-ui-pickers';\n\n\nclass ViewDate extends Component {\n    constructor(props) {\n        super(props);\n\n        this.handleDateChange = this.handleDateChange.bind(this);\n        this.handlePrevClick = this.handlePrevClick.bind(this);\n        this.handleTodayClick = this.handleTodayClick.bind(this);\n        this.handleNextClick = this.handleNextClick.bind(this);\n        this.state = { date: props.date ? props.date : new Date() };\n    }\n\n    handleDateChange(date) {\n        this.setState({ date: date });\n        this.props.onChange(date);\n    }\n\n    handlePrevClick() {\n        this.setState((state) => ({\n            date: new DateFnsUtils().addDays(state.date, -1)\n        }));\n    }\n\n    handleTodayClick() {\n        this.setState({ date: new Date() })\n    }\n\n    handleNextClick() {\n        this.setState((state) => ({\n            date: new DateFnsUtils().addDays(state.date, 1)\n        }));\n    }\n\n    render() {\n        return (\n            <div>\n                <MuiPickersUtilsProvider utils={DateFnsUtils} /*locale={koLocale}*/>\n                    <button onClick={this.handlePrevClick}>전날</button>\n                    <DatePicker\n                        format='yyyy년 M월 d일'\n                        margin=\"normal\"\n                        label='날짜를 선택하세요'\n                        value={this.state.date}\n                        onChange={this.handleDateChange}\n                    />\n                    <button onClick={this.handleTodayClick}>오늘</button>\n                    <button onClick={this.handleNextClick}>다음날</button>\n                </MuiPickersUtilsProvider>\n            </div>\n        );\n    }\n}\n\nexport default ViewDate;","const audio = new Audio();\n\nclass ControlChant {\n    constructor() {\n        this.audio = audio;\n        this.URL_SHEET = 'http://maria.catholic.or.kr/sungga/viewImage.asp?ctxtId=2012040';\n        this.URL_MP3 = 'http://maria.catholic.or.kr/musicfiles/mp3/2004090';\n    }\n\n    sheet(number) {\n        const url = this.URL_SHEET + number.padStart(3, '0');\n        return url;\n    }\n\n    play(number) {\n        const url = this.URL_MP3 + number.padStart(3, '0') + '.mp3';\n        this.audio.src = url;\n        this.audio.play();\n    }\n\n    stop() {\n        this.audio.src = '';\n    }\n}\n\nexport default ControlChant;","import React, { Component } from 'react';\nimport ControlChant from '../controller/control_chant';\nimport $ from 'jquery';\n\nclass ViewChant extends Component {\n  constructor(props) {\n    super(props);\n\n    this.controlChant = new ControlChant();\n    this.handleShow = this.handleShow.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handlePlay = this.handlePlay.bind(this);\n    this.handleStop = this.handleStop.bind(this);\n    this.state = { show: false, number: '' };\n  }\n\n  componentDidUpdate() {\n    $('#sheet').css('height', $(window).height() + 'px');\n  }\n\n  handleShow(e) {\n    this.setState((state) => ({ show: !state.show}));\n  }\n\n  handleChange(e) {\n    this.setState({ number: e.target.value });\n  }\n\n  handlePlay() {\n    this.controlChant.play(this.state.number);\n  }\n\n  handleStop() {\n    this.controlChant.stop();\n  }\n\n  render() {\n    const { name } = this.props;\n    return (\n      <div>\n        <button onClick={this.handleShow}>악보</button>\n        <div>{name}</div>\n        <input type=\"text\" value={this.state.number} onChange={this.handleChange} />\n        <button onClick={this.handlePlay}>재생</button>\n        <button onClick={this.handleStop}>정지</button>\n        {this.state.show && this.state.number ? <iframe id='sheet' src={this.controlChant.sheet(this.state.number)} style={{ border: 0, width: '100%' }} /> : null}\n      </div>\n    );\n  }\n}\n\nexport default ViewChant;","import React, { Component } from 'react';\nimport './App.css';\nimport ViewDate from './view/view_date.jsx';\nimport ViewChant from './view/view_chant.jsx';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleDateChange = this.handleDateChange.bind(this);\n    this.state = { date: localStorage.MISSA_DATE ? new Date(localStorage.MISSA_DATE) : new Date() };\n  }\n\n  handleDateChange(date) {\n    localStorage.MISSA_DATE = date.toString();\n    this.setState({ date: date });\n  }\n\n  render() {\n    return (\n      <div>\n        <ViewDate date={new Date()} onChange={this.handleDateChange} />\n        <ViewChant date={this.state.date} name='입당성가'/>\n        <ViewChant date={this.state.date} name='봉헌성가'/>\n        <ViewChant date={this.state.date} name='성체성가'/>\n        <ViewChant date={this.state.date} name='파견성가'/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}